# Generated by Django 4.2.7 on 2025-07-26 11:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('recipes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserPreferenceProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_flavors', models.JSONField(default=list, help_text='AI-learned flavor preferences (spicy, sweet, savory, etc.)')),
                ('preferred_cooking_methods', models.JSONField(default=list, help_text='Preferred cooking methods (grilling, stewing, frying, etc.)')),
                ('preferred_meal_times', models.JSONField(default=dict, help_text='Preferred meal timing patterns')),
                ('ingredient_preferences', models.JSONField(default=dict, help_text='Ingredient preference scores')),
                ('cuisine_preferences', models.JSONField(default=dict, help_text='Cuisine preference scores by region')),
                ('cooking_frequency', models.JSONField(default=dict, help_text='Cooking frequency patterns')),
                ('recipe_complexity_preference', models.FloatField(default=0.5, help_text='Preferred recipe complexity (0=simple, 1=complex)')),
                ('seasonal_preferences', models.JSONField(default=dict, help_text='Seasonal food preferences')),
                ('nutrition_priorities', models.JSONField(default=list, help_text='Prioritized nutritional goals')),
                ('portion_preferences', models.JSONField(default=dict, help_text='Preferred portion sizes')),
                ('cultural_openness_score', models.FloatField(default=0.5, help_text='Openness to trying new cultural dishes (0-1)')),
                ('traditional_vs_modern_preference', models.FloatField(default=0.5, help_text='Preference for traditional vs modern recipes (0=traditional, 1=modern)')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('confidence_score', models.FloatField(default=0.0, help_text='Overall confidence in the preference model')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_preference_profiles',
            },
        ),
        migrations.CreateModel(
            name='CulturalInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('cultural_context', models.JSONField(default=dict, help_text='Cultural context data (region, traditions, occasions, etc.)')),
                ('generated_by_ai', models.BooleanField(default=True)),
                ('ai_confidence', models.FloatField(default=0.0)),
                ('verified_by_expert', models.BooleanField(default=False)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('not_helpful_votes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cuisine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cultural_insights', to='recipes.cuisine')),
                ('ingredient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cultural_insights', to='recipes.ingredient')),
                ('recipe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cultural_insights', to='recipes.recipe')),
            ],
            options={
                'db_table': 'cultural_insights',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('meal_plan', 'Meal Plan'), ('recipe', 'Recipe'), ('ingredient_substitute', 'Ingredient Substitute'), ('cooking_tip', 'Cooking Tip'), ('cultural_insight', 'Cultural Insight')], max_length=25)),
                ('content', models.JSONField(help_text='AI recommendation content')),
                ('confidence_score', models.FloatField(default=0.0, help_text='AI confidence score (0-1)')),
                ('user_context', models.JSONField(default=dict, help_text='User context used for recommendation (preferences, health goals, etc.)')),
                ('user_rating', models.IntegerField(blank=True, help_text='User rating 1-5', null=True)),
                ('user_feedback', models.TextField(blank=True)),
                ('was_helpful', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('acted_upon_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_recommendations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('recommendation_request', 'Recommendation Request'), ('recipe_search', 'Recipe Search'), ('meal_plan_generation', 'Meal Plan Generation'), ('ingredient_substitution', 'Ingredient Substitution'), ('cooking_assistance', 'Cooking Assistance'), ('cultural_query', 'Cultural Query')], max_length=30)),
                ('user_input', models.JSONField(help_text="User's input/query")),
                ('context_data', models.JSONField(default=dict, help_text='Context data (user profile, current meal plan, etc.)')),
                ('ai_model_used', models.CharField(default='gpt-4', max_length=50)),
                ('processing_time_ms', models.IntegerField(blank=True, null=True)),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
                ('ai_response', models.JSONField(help_text="AI's response")),
                ('confidence_score', models.FloatField(default=0.0)),
                ('user_satisfaction', models.IntegerField(blank=True, help_text='User satisfaction rating 1-5', null=True)),
                ('user_followed_suggestion', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_interactions',
                'ordering': ['-created_at'],
            },
        ),
    ]
