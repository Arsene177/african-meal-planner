# Generated by Django 4.2.7 on 2025-07-26 11:46

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Cuisine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('characteristics', models.JSONField(default=list, help_text='Key characteristics of this cuisine')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'cuisines',
                'ordering': ['region', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('description', models.TextField()),
                ('prep_time', models.PositiveIntegerField(help_text='Preparation time in minutes')),
                ('cook_time', models.PositiveIntegerField(help_text='Cooking time in minutes')),
                ('total_time', models.PositiveIntegerField(help_text='Total time in minutes')),
                ('servings', models.PositiveIntegerField(default=4)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], max_length=10)),
                ('meal_type', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snack', 'Snack'), ('dessert', 'Dessert'), ('beverage', 'Beverage')], max_length=20)),
                ('ingredients', models.JSONField(help_text='List of ingredients with quantities')),
                ('instructions', models.JSONField(help_text='Step-by-step cooking instructions')),
                ('calories_per_serving', models.PositiveIntegerField(blank=True, null=True)),
                ('nutritional_info', models.JSONField(default=dict, help_text='Detailed nutritional information per serving')),
                ('image', models.ImageField(blank=True, null=True, upload_to='recipes/')),
                ('video_url', models.URLField(blank=True)),
                ('cultural_significance', models.TextField(blank=True)),
                ('origin_story', models.TextField(blank=True)),
                ('traditional_occasions', models.JSONField(default=list, help_text='Occasions when this dish is traditionally served')),
                ('tags', models.JSONField(default=list, help_text='Tags for categorization and search')),
                ('dietary_labels', models.JSONField(default=list, help_text='Dietary labels (vegetarian, vegan, gluten-free, etc.)')),
                ('allergen_warnings', models.JSONField(default=list, help_text='Allergen warnings')),
                ('chef_notes', models.TextField(blank=True)),
                ('is_published', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('average_rating', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('total_ratings', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_recipes', to=settings.AUTH_USER_MODEL)),
                ('cuisine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to='recipes.cuisine')),
            ],
            options={
                'db_table': 'recipes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('countries', models.JSONField(default=list, help_text='List of countries in this region')),
                ('cultural_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'regions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('local_names', models.JSONField(default=list, help_text='Local names in different languages')),
                ('category', models.CharField(choices=[('vegetables', 'Vegetables'), ('fruits', 'Fruits'), ('grains', 'Grains & Cereals'), ('legumes', 'Legumes'), ('meat', 'Meat & Poultry'), ('fish', 'Fish & Seafood'), ('dairy', 'Dairy'), ('spices', 'Spices & Herbs'), ('oils', 'Oils & Fats'), ('nuts', 'Nuts & Seeds'), ('other', 'Other')], max_length=50)),
                ('description', models.TextField(blank=True)),
                ('nutritional_info', models.JSONField(default=dict, help_text='Nutritional information per 100g')),
                ('seasonality', models.JSONField(default=list, help_text='Months when ingredient is in season')),
                ('storage_tips', models.TextField(blank=True)),
                ('allergen_info', models.JSONField(default=list, help_text='List of allergens this ingredient contains')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('common_regions', models.ManyToManyField(blank=True, help_text='Regions where this ingredient is commonly used', to='recipes.region')),
                ('substitutes', models.ManyToManyField(blank=True, help_text='Alternative ingredients', to='recipes.ingredient')),
            ],
            options={
                'db_table': 'ingredients',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.AddField(
            model_name='cuisine',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cuisines', to='recipes.region'),
        ),
        migrations.CreateModel(
            name='CookingTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('category', models.CharField(choices=[('technique', 'Cooking Technique'), ('ingredient', 'Ingredient Tip'), ('equipment', 'Equipment'), ('safety', 'Safety'), ('cultural', 'Cultural Context'), ('nutrition', 'Nutrition')], max_length=50)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_ingredients', models.ManyToManyField(blank=True, to='recipes.ingredient')),
                ('related_recipes', models.ManyToManyField(blank=True, to='recipes.recipe')),
            ],
            options={
                'db_table': 'cooking_tips',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserRecipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('saved', 'Saved'), ('planned', 'Planned'), ('cooking', 'Currently Cooking'), ('completed', 'Completed')], default='saved', max_length=20)),
                ('is_favorite', models.BooleanField(default=False)),
                ('times_cooked', models.PositiveIntegerField(default=0)),
                ('last_cooked', models.DateTimeField(blank=True, null=True)),
                ('personal_notes', models.TextField(blank=True)),
                ('modifications', models.JSONField(default=list, help_text="User's modifications to the recipe")),
                ('cooking_started_at', models.DateTimeField(blank=True, null=True)),
                ('cooking_completed_at', models.DateTimeField(blank=True, null=True)),
                ('cooking_duration', models.PositiveIntegerField(blank=True, help_text='Actual cooking duration in minutes', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_interactions', to='recipes.recipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_recipes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_recipes',
                'ordering': ['-updated_at'],
                'unique_together': {('user', 'recipe')},
            },
        ),
        migrations.CreateModel(
            name='RecipeRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='recipes.recipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_ratings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recipe_ratings',
                'ordering': ['-created_at'],
                'unique_together': {('recipe', 'user')},
            },
        ),
        migrations.CreateModel(
            name='RecipeCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recipes', models.ManyToManyField(blank=True, to='recipes.recipe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_collections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recipe_collections',
                'ordering': ['-updated_at'],
                'unique_together': {('user', 'name')},
            },
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['cuisine', 'difficulty'], name='recipes_cuisine_6283cf_idx'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['meal_type', 'is_published'], name='recipes_meal_ty_b0c1fa_idx'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['average_rating', 'total_ratings'], name='recipes_average_1c21fc_idx'),
        ),
    ]
